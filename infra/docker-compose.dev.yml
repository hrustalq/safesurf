version: '3.8'

services:
  # API Service
  api:
    build:
      context: ../backend/api
      dockerfile: Dockerfile
      target: development
    container_name: api-dev
    restart: unless-stopped
    env_file: .env
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ../backend/api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # Frontend Services
  admin:
    build:
      context: ../frontend/admin
      dockerfile: Dockerfile
      target: development
      args:
        - PORT=${ADMIN_PORT:-8080}
    container_name: admin-dev
    restart: unless-stopped
    ports:
      - "${ADMIN_PORT:-8080}:${ADMIN_PORT:-8080}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=${API_URL}
      - VITE_PUBLIC_IS_HOSTING_API_KEY=${IS_HOSTING_API_KEY}
      - PORT=${ADMIN_PORT:-8080}
    volumes:
      - ../frontend/admin:/app
      - /app/node_modules
    networks:
      - app-network

  web:
    build:
      context: ../frontend/web
      dockerfile: Dockerfile
      target: development
      args:
        - PORT=${WEB_PORT:-3001}
    container_name: web-dev
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3001}:${WEB_PORT:-3001}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=${API_URL}
      - PORT=${WEB_PORT:-3001}
    volumes:
      - ../frontend/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    restart: unless-stopped
    env_file: .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Email Testing
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog-dev
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-dev
    entrypoint: /docker-entrypoint.custom.sh
    command: nginx -g 'daemon off;'
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/snippets:/etc/nginx/snippets
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint.custom.sh:ro
    depends_on:
      - api
      - admin
      - web
    networks:
      - app-network
    environment:
      - ADMIN_PORT=${ADMIN_PORT:-8080}
      - WEB_PORT=${WEB_PORT:-3001}
      - API_PORT=${API_PORT:-3000}

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 