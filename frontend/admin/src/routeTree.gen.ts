/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as InvoicesImport } from './routes/invoices'
import { Route as HostingImport } from './routes/hosting'
import { Route as ConfigsIndexImport } from './routes/configs/index'
import { Route as ConfigsCreateIndexImport } from './routes/configs/create/index'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const InvoicesRoute = InvoicesImport.update({
  id: '/invoices',
  path: '/invoices',
  getParentRoute: () => rootRoute,
} as any)

const HostingRoute = HostingImport.update({
  id: '/hosting',
  path: '/hosting',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ConfigsIndexRoute = ConfigsIndexImport.update({
  id: '/configs/',
  path: '/configs/',
  getParentRoute: () => rootRoute,
} as any)

const ConfigsCreateIndexRoute = ConfigsCreateIndexImport.update({
  id: '/configs/create/',
  path: '/configs/create/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/hosting': {
      id: '/hosting'
      path: '/hosting'
      fullPath: '/hosting'
      preLoaderRoute: typeof HostingImport
      parentRoute: typeof rootRoute
    }
    '/invoices': {
      id: '/invoices'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof InvoicesImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/configs/': {
      id: '/configs/'
      path: '/configs'
      fullPath: '/configs'
      preLoaderRoute: typeof ConfigsIndexImport
      parentRoute: typeof rootRoute
    }
    '/configs/create/': {
      id: '/configs/create/'
      path: '/configs/create'
      fullPath: '/configs/create'
      preLoaderRoute: typeof ConfigsCreateIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/hosting': typeof HostingRoute
  '/invoices': typeof InvoicesRoute
  '/about': typeof AboutLazyRoute
  '/configs': typeof ConfigsIndexRoute
  '/configs/create': typeof ConfigsCreateIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/hosting': typeof HostingRoute
  '/invoices': typeof InvoicesRoute
  '/about': typeof AboutLazyRoute
  '/configs': typeof ConfigsIndexRoute
  '/configs/create': typeof ConfigsCreateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/hosting': typeof HostingRoute
  '/invoices': typeof InvoicesRoute
  '/about': typeof AboutLazyRoute
  '/configs/': typeof ConfigsIndexRoute
  '/configs/create/': typeof ConfigsCreateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/hosting'
    | '/invoices'
    | '/about'
    | '/configs'
    | '/configs/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/hosting' | '/invoices' | '/about' | '/configs' | '/configs/create'
  id:
    | '__root__'
    | '/'
    | '/hosting'
    | '/invoices'
    | '/about'
    | '/configs/'
    | '/configs/create/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  HostingRoute: typeof HostingRoute
  InvoicesRoute: typeof InvoicesRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ConfigsIndexRoute: typeof ConfigsIndexRoute
  ConfigsCreateIndexRoute: typeof ConfigsCreateIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  HostingRoute: HostingRoute,
  InvoicesRoute: InvoicesRoute,
  AboutLazyRoute: AboutLazyRoute,
  ConfigsIndexRoute: ConfigsIndexRoute,
  ConfigsCreateIndexRoute: ConfigsCreateIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/hosting",
        "/invoices",
        "/about",
        "/configs/",
        "/configs/create/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/hosting": {
      "filePath": "hosting.tsx"
    },
    "/invoices": {
      "filePath": "invoices.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/configs/": {
      "filePath": "configs/index.tsx"
    },
    "/configs/create/": {
      "filePath": "configs/create/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
